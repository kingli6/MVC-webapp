220427 Lots of theory and by the end of it, he starts creating a project..
	1:55:00 connecting your project to the solution file. //I dont know much about this.
	2:07:00 adding .vscode folder to VSCODE by oppening ctrl+shift+p and typing "generate assets for build and debug"
	-you can <<dotnet build>> and by moving to a folder where there is .proj file, you can run <<dotnet run>>
		Settings for the port is in launchSettings.json file, where you can change incase of port not available
			"applicationURL": "https://localhost:7227;http://localhost:5145", 
	-How to exclude files in VS -open settings and type exclude
	
220427 1259 we create api endpoints and controller 
	15:00 talk on how you can disable and enable null warning. In csproj file. <propertyGroup><Nullable>you can disasble it</Nullable>
		Tip // to avoid null warnings, you can set it to = Empty or =""
	23:00 creating our new controller file.
	-TIP //If you don't provide the appropriate method, it will take what it can find 32:00
	405 Method Not Allowed. If the methods are decorated with [HttpGet()] "{}"
	<<dotnet watch run>>
	1:28:20 explanation of developer console.
	1:33:00 Installing NUGETS
		Microsoft.EntityFrameworkCore
		Microsoft.EntityFrameworkCore.Tools
		Microsoft.EntityFrameworkCore.Sqlite
	Tip models can also be called as entitys. 
	1:41:00 [Key] if you want to call it something else than Id
	1:49:00	Adding Data folder and created a CourseContext.cs //The coupling between database and its memory
		connection A): DbContext
	1:52:00	 => Set<Course>();  Explanation on why intializing this is needed	
			"there was a null string warning. ? wasn't right of a object... = new () wasn't allowed to create abstract or interface type of DbSet"
			1:55:00"why you don't want to instantiate through a constructor is due to it being hard to do tests"
			"creating contructor to handle configuration connections "
	2:00:00	connection B) Setting dependency injection through program.cs
		Skapar databas koppling. Letting the program know which classContext I'm using, 
		Which database manager I'm using; Sqlite
		2:08:00 connection C) Instead of hard coding the ConntectionString for Sqlite, we use appsetting.Dev..json file
			naming your Sqlite connection string. 
		builder.Configuration.GetConnectionString("Sqlite") //builder.Configuration. lets you get things from appsettings.dev... json file
	2:20:25 Creating migrations
		<<dotnet ef migrations add InitialCreate -o "Data/Migratons"  // The -o is needed to reassign where it is saved.
		"Ni ska alltid ALLTID ska titta på. Vad gör den förnåt!?"
	2:23:40	Dotnet update <<dotnet ef database update>>
	2:29:00 right click .db file, choose open database. SQLITE Explorer should show up
				table should be empty when you open Show Table on Courses
	2:34:00 Creating a constructor in CourseController.cs //to be able to save course to database?
		auto generating field through contsructor. to avoid this. keyword. Open settings, search private. Change field to _ 2:38:30
		Also uncheck this, when you search this in settings.
	2:43:00 Defining Get() method with async await Task<ActionResult<List<Course>>>
	2:49:00	Defining a Post() method. returning a Task<ActionResult<Course>>. Using await _context.Course.AddAsync(course);
		and saving all the changes with await _context.SaveChangesAsync();
	2:53:00 After re-running the dotnet. Swagger will show what to expect in it's body.
		2:54:00 Postman configuration. Add key in the Header. //I can't post anything but works on swagger...
		3:02:00 A big NONO . you cant use your model objects in your CRUD method
				You shouldn't have too much code in your controller.
				
	220428 09 adding more methods, checking with swagger				
		1:40: Creating a Put method. And Discussion on "change tracking"
		<Tip> Använd patch om det är delvis uppdatering. Put för uppdatering av hela objekt. 
		00:14:00 Creating GetBy("{property}") 
		"SignleOrDefaultAsync" or "FirstOrDefault", what's the difference?
			single when there is only one(but if there's more, you will get all them). 
			First finds the first one.
			var response = await _context.Courses.SingleOrDefaultAsync( c => c.CourseNumber.ToLower() == courseNumber.ToLower());
		40:00 ViewModels. Your not suppose to be directly manupilating database objects. 
			00:46:00 Debugging
		1:24:00 building a GetByID("{id}")
		TiP! use FindAsync for an item from a database, else use Where or FirstOrDefault 1:31:00	
So far...." I cant update a course(PUT). it fails" 
GIT HELP
	-git stash /*stores away changes*/ -git stash pop, //pops back the changes if your in another branch
	-git rest --hard //resets the branch to a previous commit
		
		13	githug tutorial by rasmus?	
220428 130301 
		2:00 //If you're adding a lot string together. Use Concat or StringBuilder
		20:00Presentation on Repository Pattern
		39:00? Creating Interface
		<Tip> Shift + alt + down/up arrow will duplicate the line
		45:40 <Tip> "the method name should have Async in the end, so coders know that the body should have wait/async"
		47:20 Creating a repositories folder and implementing the interface here with CourseRepository.cs
		!imp To use Async method, you need library; EntityFrameworkCore
		57:00 We are updating the controller file CourseController.cs to use the ICourseRepository, instead of directly contacting the Db context class. 
		1:00:00 Changing something in program.cs!??? We are making a choice of how the users recieve the api
			builder.Services.AddScope/ or AddSingleton/ or AddTransient? "beror på hur instansering ska ske för varje request"
			Singleton - the first request will get the data? But if there are more requests, you will recieve the same(first request) since its in the memory.
						"En instans delas av fler"
			Transient - will create a unique instans to each request
			Scoped -	You get a new instance for a new request WHEN IN DOUBT, use scoped. 1:06:00
		"Now we get the response or data from Db first throug repository class, and then to Context class."
		1:39:00 building CourseRepository GetCourse by ID. FindAsync is not suitable due to null referense warning. so we are using SingleOrDefault... 
			return await _context.Courses.FindAsync(id ?? null); //this is a way to remove the warning.
			instead we use this return await _context.Courses.SingleOrDefaultAsync(c => c.Id == id); //and also add ? like mentioned below
			1:40:00 adding  ? in the return argument public <Task<Course?> GetCourseAsync(int id);
		1:46:00 Adding CourseViewModel abstraction to the repository class. So from context/controller we moved getting response from database to repository class. 
			Now we are moving or adding the viewmodel to the repository class. Null checks stays in the context/controller class
		1:47:30 We are using .Where method to find the correct data and create a new instanse to save all the information on it.
			return await _context.Courses.Where(c => c.Id == id)
			.Select(course => new CourseViewModel{
				this = that...
			})
			BUT there is an error //IQueryable<CourseViewModel>' does not contain a definition for 'GetAwaiter' and no accessible extension method 'GetAwaiter'
			in the end you need a }).SingleOrDefaultAsync();
		"THis is what they did before autoMapper..."
		1:53:00 [ApiController] this decorator helps with controlling that the incoming data is not null..
			Regarding try catch controlls in the controller. "Att slänga är en bad practice..." 1:54:30
			"every time you throw, you create an object in the heap/stack. so its better to catch the errors higher up in the program rather than having try/catch everywhere.."
		2:07:00 return type bool for the method SaveAllAsync. So  Micheal added, > 0 "Q. what does this do?"
			return await _context.SaveChangesAsync() > 0;
		<Tip>.Remove doesnt have async/await //Add method didnt have async before. It showed upfrom a recent update... WHICH MEANS
			// I need to learn how to follow the updates.
		2:13:00 AutoMapper 
			AutoMapper.Extensions.Microsoft.DependencyInjection by Jimmy Bogard
				Create a folder called Helpers, Create class AutoMapperProfiles and inherit : Profile, add using AutoMapper.
				// Map från -> till
					CreateMap<PostCourseViewModel, Course>();
					CreateMap<Course, CourseViewModel>();
		2:21:00 Creating setting for a new dependency injection for automapper.
		<Error> Creating a default class for made a protected security instead of public.. 
			"System.MissingMethodException: No parameterless constructor defined for type 'College_API.Helpers.AutoMapperProfiles'"
			Not i got another error //System.ArgumentException: GenericArguments[0], 'System.Single', on 'T MaxInteger[T](System.Collections.Generic.IEnumerable`1[T])' violates the constraint of type 'T'
<Tip> Ctrl+P can let you search for files in your project. VsCode tip.
		UPDATING THE PACKAGES TO RECENT VERSION MADE THIGNS WORK!!!
		2:28:00					//from -> till (PostVehiceViewModel course), so course is PostVehicle view model
			var courseToAdd = _mapper.Map<Course>(course);	//here we are taking Course(from db) to PostcourseViewModel.
		[HttpGet()]
        //api/v1/course
        public async Task<ActionResult<List<CourseViewModel>>> ListGetCourse()//How do I make changes everywhere? VSCODE command...
        {
            var response = await _courseRepo.ListAllCourseAsync();
            var courseList = _mapper.Map<List<CourseViewModel>>(response);	//<---here. Q. this is confusing. Teacher, Michael has written from CourseViewModel -> till response... But we are getting
			// the entire list through response, and we are converting it to ViewModel... So it should be the other way around...
            return Ok(courseList);											// A. On 2:49:50 he says till and from. So I'm ccorrect.
        }	
		2:46:45 Continuing with Repository pattern. We are moving the automapper to the repository class.
		2:50:00 we used .ProjectTO (needed a using statement), and _mapper.ConfigurationProvider)
			public async Task<CourseViewModel?> GetCourseByIdAsync(int id)
			{
				return await _context.Courses.Where(c => c.Id == id)
				.ProjectTo<CourseViewModel>(_mapper.ConfigurationProvider).SingleOrDefaultAsync();
			}
		Robins github https://github.com/robinskoogh
		
220503 more database and other interface stuff..
		05:00 Five step demo by MichealGustavsson on Security..??? Claims Roles
		27:00 HATEOS //a standard way to confirm that your actions have been successful. and here is the object you created in the head...  
		//	Your GET/POST methods, you don't want to return back an object everytime. Like for post method.
						// There you can use HATEOS
		32:00 Using [Required] in data model class, So incoming create object requests doesn't have ex null in CourseNumber...
				if(!ModelState.isValid)... //in case of model number. this can be done in front end. 
				if (!ModelState.IsValid) return StatusCode(500, "Invalid model. Model must have Course number");
		35:28 A cooler way to catch error would be to set it in the required annotation. [Required(ErrorMessage = "Registreringsnummer is required)]
		41:00 UpdateCourse PUT method. 
				From repo class Michael chooses to use throw exception. 50:00 !!!Since we used try/catch in repo, we can use it again in the controller since we will recieve a exception if it fails!!
		1:20:00  -dotnet --info 
		1:25:00 building a Patch method
		1:36:00 don't return (in catch (Exception ex)) return StatusCode(500, ex). !!Dont return ex. Instead ex.Message...?
		
		2:03:00 Fixing the database structure.  To remove repetitive.
		2:09:00 Adding a new controller for the manufacturer table. Creating Get methods
		2:13:00 he asks: How to go about to create 1:many conenction in entity framework
				with public ICollection<Course> Courses {get; set;} = newList<Course>();
			2:17:00 how to add ForeignKey
		2:29:00	-dotnet ef migrations add "added make and vehcile relationship" -o "Data/Migrations"
		2:34:30 -dotnet ef database drop --force // droping the table due to complication in adjusting connetion tables
				-dotnet ef database update //updates the migration files. //sometimes this won't work
		"There was a discussion on tables depending on eachother. Here We made manufacturers. coupled with Vehicles."
			"You can't delete a item in the manufacturing table, if a vehicle is connected to it." "Man kan inte ha föräldarlösa barn." 
			2:39:20//On delete: ReferentialAction. Cascade.. which means it will delete everything connected to the...
			You can change it to SetNull or NoAction or Restrict
		2:54:00	Michael Gustavsson is creating controller, Repo with Interface for Manufacturing table.
			
		
220503 13.. more . Around 2:30:0 we start with security. he creates a security demo, which I'm not sure if its connected to the project
		we start with building methods for the repo class.
		09:00 for controller to get in repo class with its own context manupilation, we need dependency injection. 
		builder.Services.AddScoped<IManufacturerRepository, ManufacturerRepository>(); //for the sake of getting a class that is instantiated.
		17:00 fixing automapper for Manufacturer. There was a mistake.<!!>// hot reload doesn't work with program.cs or Automapper.  
		26:00 creating AddVehicleAsync WITH manufacturer(connecting table) //manufacturers is the parent table.
			var make = _context.Manufacturers.Include(c => c.Vehicles).Where(c => c.Name == model.Make).SingleOrDefualtAsync();







//-----------------PROJECT MVC, Razor, React--------------------------------------------------------

"Links"
app.diagrams.net 	For building diagrams. //under software, you will find database diagrams
namecheap.com 		"Domain names, "
netify.com - where you can host your website (react or html/css)
	[20220505_090110 1:21:30]	Theory starts on WEB 
		Utvecklingsverktyg -1:22:10
		Hosting - 1:28:19	Exekveringsmodeller??(client or serverside)
		MVC design mönster 2:00:00
		
"mest vanligaste design mönster idag?" 	In ASP,pure JS = it's MVC.  React/Single page app = MVVM
	
//MVC asp code starts at [2:19:30??]
-dotnet new mvc -n MvcApp

-dotnet sln add Clients/MvcApp/		"Connecting the project with the MVC. OBS be on the parent folder" 
//Client is a new folder that you can create with -mkdir Foldername
	"för att bli en duktig utvecklar måste man förstå, inte som de googlande utvecklare"
//Deletes folders and content from js and css [2:49:00]. At [2:59] he adds the Html: 5 semantic? in the _Layout.cshtml 
	@RenderBody()

[20220505_130015 30:00]
//We are building a MVC model and not Razor pages, so we deleted the css file, js file and erase everything except the @RenderBody() in the sharedLayout page.
	06:06 adding fonts to the library (Poppins and Roboto are simple)
//We have a controller(Vehicles), in it a method called index(). We create a View-file that will run the Index() method
	"So that file will be called Index.cshtml". 23:00. "We create a new Razor page file but delete the razorpage code and controller extention"
			"-since we are using a MVC project." With CS-code, we don't have any handholding so we have to create all the files ourselves. 
//with @ _Layout.cshtml (the main page) we can add the different tabs in the page [32:00]
	"short hand for createing elements" ul>li>a "will create unordered list, a list and inside a link"
//HttpClient(); [35:00] Using Tag helper in the cshtml file to conntect to the controller.
	asp-controller="Vehicles" asp-action="Index"

Connecting to the API 40:00
	///We add our Get-method [41:19] 
	[51:38]using var http = new HttpClient(); var response = await http.GetAsync(url); 
	///url is "https://localhost:####/api/v1/vehicles/list
	///Talk about Garbage collector
//We run into an error when we try Debugger
	We solve it by running the api and the mvcApp in different VS-code. Due to mapstructure mechanics, 
	the debugger runs everything at once. 58:00
	"You can run the debugger .NET Core Attach but you need to type something to make it work, its an extension maybe?" 1:26:00
1:20:00 Back from break. HTTPS development certificate
	If you don't have this, you can run the Terminal as Admin and type 
	-dotnet dev-certs https --trust
//Second debugger run 1:30:00
//Creating a View Model 1:31:00 to take in the data thats coming in.	
	The data thats coming in is screwed and since it doesn't match our viewModel properties, we need to fix it. 1:37:30
"Model folder in MvcApp is for classes which has methods that talks to the REST api"1:45:00
		Is that affärs logik, in the presentation picture?
///Instead of using in Courses Controller
	var options = new JsonSerializerOptions
      {
        PropertyNameCaseInsensitive = true
      };	
	///You can use in the CoursesViewModel.cs, but it will clutter the file. 1:48:300
    [JsonPropertyName("CoursesId")]	

//Moving the logic above to the right place, which is the Model folder. 1:52:00
//creating baseUrl in appsettings.Development.json so it can be reused. 1:55:00
	_baseUrl = $"{_config.GetValue<string>("baseUrl")}/course";
	
//Using Repository Pattern by creating a CourseFunctionsModel file under Model folder, and having the functions 
that has to do with talking to the API in there. 2:00:00 around here

			//Theory. 
				///Michael is showing 2:30:000 how you can send ViewData from the Controller [ ] This could be worth experimenting
			In controller: ViewBag.Message = "Passa på at köpa...";  In View file: <div>Dagens meddelande är: @ViewBag.Message</div>
			2:35:00///In Program.cs you adjust how the routing is done.
				app.MapControllerRoute(
					name: "default",
					pattern: "{controller=Home}/{action=Index}/{id?}");

					/// You can use HTTP tag above the methods or Class file where you change the name of the default route. 
					[Route("[controller]")] above the class CourseController, can be changed.
					"If you dont have any Http tag above a method, by default it's [HttpGet]"
			Razor notes @ symbol can be used in different ways. 2:45:00

2:58:00	//We are adding a £ tag in the View file to tell where the data is coming from
	@model IEnumerable<MvcApp.ViewModels.CourseViewModel>
	///We fill in the view file with @ tag helpers to bring in the data. I don't fully follow here. [ ]	
//We need to have HTTP tags above the methods to diffrentiate them. ??? asp-action="Details" didn't help...
		<a asp-controller="Courses" asp-action="Details">@course.Title</a>
		///asp-controller="Courses" means it will look at CoursesController. ///You don't need to type COntroller.
		///asp-action will search for the method name, BUT why didn't it work? 
	
3:12:00 //BAD practice. You must send in the return View("what the method name is", object)
-------------------[20220510_090125]
05:30 ish, in app.development.json, we can change the port number where the project starts.
29:00	To be able to run the debugger with both projects in the main folder, you need to remove .vscode folder everywhere
except the main project folder.
In the launch.json folder. We are changing "program": "${workspaceFolder}/WCC-API/bin/Debug/net6.0/WCC-API.dll", to
											"program": "${workspaceFolder}/Clients/MvcApp/bin/Debug/net6.0/MvcApp.dll",
									In "env": we'll add another line, so it looks like this
									"env": {"ASPNETCORE_ENVIRONMENT": "Development",
											"ASPNETCORE_URLS": "https://localhost:5000"}
	We also add another element for API project, where there is two difference. 
	  "program": "${workspaceFolder}/WCC-API/bin/Debug/net6.0/WCC-API.dll", and
	  "ASPNETCORE_URLS": "https://localhost:5001"							Look at 35:30
			
In the task.json folder. We are changing         "${workspaceFolder}/WCC-API/WCC-API.csproj", to "${workspaceFolder}",
													So removing the path and leaving the root folder.

-------------"This way you can run different projects together in the debug mode"--------------
A bit confusing, but we are changing the element with API to 5001 and changing the development.json in the MVC-APP to 5001...

50:12 To know which port number you need to have in MVCapp, run the API project with dotnet watch run, and use that port
56:00	If you want to add in data automatically, you can follow here.
	///After filling in the code 1:06:00 
	"dotnet ef database drop --force" and "dotnet ef database update"
//----------------------HTML and CSS----------------------// 1:36:00
1:49:00 creating nav bar. //obs! navbar needs to be id="navbar" and not class...1:52:10
2:10:00	We used fonts from Font-Awesome ///step 1 Choose a logo https://fontawesome.com/search?s=solid%2Cbrands
	///step 2.https://cdnjs.com/libraries Search for Font-awesome
2:43:00	//Building the Course list page, trying to add img to the list. 
2:58:00 //Fixing gallery-wrapper. with display: grid; grid-template-columns: repeat(4, 1fr);	
20220510_130556 Continuing css----------------------------------------------
	17:30	aspect ratio calculator. working with img is hard in webapplication. //Tip: Get pictures that are 2000-5000 px big.
		33:00 never re-use id on the same page twice id="navbar"
35:00 Using javascript to have a pop up effect when you click on a container
	 &nbsp; non breaking space?`45:25
1:26:00 still building the pop up effect on items. 1:31:30 Explanation. Error with JS, needed to remove a line below at line 31. 
1:49:00 Css for the pop up effect		
		2:34:10 creating a button
	3:00:00 Moving css code to another file, and using @RenderSection("styles", false) in the @ _Layout.cshtml
		"similarly for scripts"
-------------------------20220511_100737 --------------------------------
We are creating the Details page. 18:00	You need [HttpGet("Details/{id}")] above the method. 
"TIP Before building the method or JavaScript, try testing if you can reach the site!!!"
27:20 slice(0, -1) javaScript method where you take a string and choose which part you want to keep and which to remove.
			0 means starting from 0 index, and -1 is removing the last index.
45:00	Working on Details method. 







	//Fast forwarding
[1:38:30] Needing Json serializer settings so program can read incoming data
[1:55:00] We create a model class VehicleServiceModel where we put in the hosting link and Json serializer through constructor so we can call it in the methods.
[2:23:50] PRESENTATION on MVc model? The timestamp will show you what Action methods can return
[2:35:00] Setting up app.MapCOntrollerRoute in Program.cs to automatically route to a certain place?

[20220510_090125 27:33] How to set up the debugger MVC model and API from an external project?

[20220510_090125] Building the website by setting up the front page. and things explained above.

[20220510_130556] Lots of JS and css

[20220511_100737] Adding functions to the site. Like opening item, flexible resolution(mobile, pad, large screen)

[20220511_125700] search functions and more. AT [2:28:00] We start the JS app.!!

[20220512_090134] Starts by talking about the project, maybe continues with the jsAPp and Razor pages starts at [2:31:00]

[20220517_090026]	Razor pages [1:56:00] Creating Add car function

[20220517_130531] [41:32] We are convinced that react is the shit. And it starts here



		//REACT 
		///	-npx create-react-app .		"The dot . meanns make the project inside the folder called react-app? YES 
		/// -npm install 		//You need to have node_modules in your project. BUT I DID. Couldn't get the website to launch without it
		///	NOT NEEDED UNLESS...-npm i -g npx 	"-g means to install the name npx" i means..
		///	-npm start
		/// 
		/// Had an issue with "npm" not working(windows) ERROR: global, local deprecated...https://github.com/npm/cli/issues/4980
			///solved it by following the link above. 
[20220517_130531]
[1:43 40]	Two extensions to help with code. Jest and Jasmine [1:52: 20] Extension neede ES7: ES7 React/Redux/GraphQL/React-Native snippets
// after deleting things, we are coding in src Folder, in index.js [1:55:00]
	//Babel - tranforms JS to "real" js?
// We create a new file called App.jsx, there we are the html things, 
	// where we export and then import into index.js in the same src Folder.
	// [2:11:00] SO you can import inside another file.

// Creating CSS [2:41:00]. //Making things dynamic, as in using properties 
// from data?[2:51:00]  // [2:58:35] Placing in huge data and calling 
	//it in VehicleList.jsx  // Short summary [3:11:50]

[20220518_091607 09:50] React Router
// ESLint. [17:00] Helps you with javascript coding. [21:00] Repetition
	///Font awesome is mentioned to bring fonts.
	//More explanation regarding how Javascript works [36:30]
		"You can use props instead of a specific {object?}" with curly bracers, you break down and choose specific object
// Adding a COmponent Folder [50:45]
// [45:37] How to debug with the browser
// [1:15:30] Moving the css files from Public folder to src Folder (change the script or code from index in Public to App.js in src Folder
// [1:23:30] adding edit and delete logo in the VehicleItem.jsx
// Händelse hantering. ie edit and delete logo, adding functions..

// [1:48:00] USing an API! 
	/// starting the API with -dotnet run 
	///You might have to change the port. Go into Properties and launchSetting.json 
	/// change the port to something else. 7247 and 5246? 
// [1:51:00] Building function to bring the data
	// we need a useEffect funtion to use the incoming url BUT YOU will get an error
	// We add the JS port to the .net API by adding it in the Program.cs [2:02:00]
// Changing the link from hardcoding it to moving it to a proper place
	"Placing it in .env" inside the root folder. [2:08:30] with REACT_APP_BASEURL
	
		const url = `${process.env.REACT_APP_BASEURL}/vehicles/list`;
		const reponse = await fetch(url); 
				//Dont forget to restart your React app
// the useEffect() DANGER. [2:27:20] 
	///Don't fully understand how the flow of this works. But he explains during the end of the video a few times. 
		"needs two function, the second function does a update-method." 
		///If you see just square breackets, it means it's expecting an array
	
[20220518_130639] [06:21] installing router with -npm install react-route-dom	//document object model.		
	///this is to be able to navigate to a new page. [21:30] importing it in App.jx
//[28:30] coding in Home.jsx -it's the homepage.  Introducing <> JSX fragment or React.Fragment.
//In App.js, we are including different pages with Router, routes and route [38:16]
// [41:00]Creating Navbar(){}	//theres a wrong way to do it (without using import { NavLink }
	///With this we place two pages. A Start sida and lager fordon, which shows list of cars.
//CReating AddVehicle(){} [1:23:00]. With the form tags filled in AddVehicle.jsx, we include the route -link to the new page in App.jsx
	///and add the button in the navbar to the new page. 
	<NavLink to='/add'>Lägg till</NavLink>
//Data bindning	[1:33:0 ] First we build for "Registreringsnummer". Now we build the remaining [1:47:30]
	
	<input value={regNo} type='text' id='regNo' name='regNo' />	//we want to get a input value={regNo} and we want to bind it.
	<input onChange={onHandleRegNoTextChanged} value={regNo} type='text' id='regNo' name='regNo' />	//onChange={onHandleRegNoTextChanged} -this tracks what's being changed in the textbox??
	
	//[1:33:30] we need to import useState and define addVehcile function
	import { useState } from 'react';
	
	function AddVehicle() {
		const [regNo, setRegNo] = useState('');		//this makes regNo be accpeted at the value={regNo}
		
		let vehicle = {			//we are creating a vehicle object
			regNo: regNo		//since both have the same name, you can simply have it as regNo.
		}
		
		const onHandleRegNoTextChanged = (e) => {
			console.log("Text är ändrar")
			console.log(e.target.value); ///the console.log just displays it for us to see in the debugeer	
			setRegNo(e.target.value);	//this records what you type in the form. 
		}
		
		const handleSaveVehicle = (e) => {
			e.preventDefault();		//what does this do????
			
			console.log(vehicle);
		}
		
		return (
		<>
		<label htmlFor=''>Registreringsnummer</label>
		<input
		onChange = {onHandleRegNoTextChanged}
		value={regNo}
		type='text'
		id='regNo'
		name='regNo'
		/>
		);
	}
//Adding the rest of the properties [1:50:27]
//Adding an img DEFAULT item to function AddVehicle().. [2:00:00]
// saveVehicle(vehicle) => { }		//to database [2:03:26] [2:05:20] there is code below
	//we returned empty console.log(await response.json()); which gave an error. 
	"Find out why after the break!"[2:15:00]
Quick explanation on how the methods are connected. saveVehicle and the above. [2:19:30] 
//Edit vehicles 2:31:43		process{a) create a EditVehicle.jsx file. You'll have funtions there and then export it. 
									b) in App.jsx, you'll import it and add the <Route path='/edit/:id' element={<EditVehicle />} />}
// 2:35:00 import { useNavigate } from 'react-router-dom'; //we use this to navigate "kod mässigt?"
		//2:55:00	making the Put fucntion and the save function
//Adding extra steps to hide or veiw data [3:10:00] Adding an ResponseVeiwModel in Vehicles-API,
	//creating JsonSerializer in [HttpGet("list")] method
//Documentation for swagger 2:20:00? [ProducesResponseType(StatusCodes.Status200OK)]
//<PropertyGroup> settings 2:33:00
//2:53:00 Om Async await. tre olika sätt att kommunicera.
//MicroServices 3:04:00. Kuberneties is a deligating service/program that does the smart architect for you
//Talking to external API 3:27:00 	
	.		
	.
	.
	.
	.
	
///////////////////////////JS EXAMPLE///////[40:43]

//Using functions 
function VehicleList() {
	const vehiclesRegNo = [
	{regNo: '66'}, {regNo: '61'}, {regNo: '32'},	//is this an array of string? or objects?
	];
	return(
		<table>...</table>
	);
}

//We are assinging the data (regNo) to a new const newList
const newList = vehiclesRegNo.map((objectsOrX) => {
	return objectsOrX;	//newList will become an array of objects if you return the whole thing. It's dynamic
});						// if you return objectsOrX.RegNo then it will become a list of string.	

//Example 2	Here we instantiate a new type with a property vehicleItemProperty to hold all the things inside vehiclesRegNo.
{vehiclesRegNo.map( (propName) => (
	<VehicleItem vehicleItemProperty={propName} Key={propName.regNo}/>
	)
)}
vehiclesRegNo.map // vehicles has a lot of car objects. vehiclesRegNo is 
			 // an array of objects. map is an advanced for loop 
			 // that loops through the entire list.
variableName 	//... accessing what's inside, so it's a property

VehicleItem vehicleItemProperty	// here we create a new instance of VehicleItem.
					// "egenskapen" is what he calls VehicleItemProperty. 
					// is vehicleItemProperty the name? No, It's a Dynamic property. 
					// Which we can use as argument else where.

//Example 3 A function that recieves VehicleItemProperty [40:43]
function VehicleItem({ vehicleItemProperty }) {
	return(
	<tr>
	<td>{vehicleItemProperty.regNo}</td>
	</tr>
);?}
//OR we can use props to access everything without knowing what's in it.
function VehicleItem(props) {	// props can be used to get EVERYTHING in VehicleItem.
	console.log(props);			// Or we can use function VehicleItem(vehicleItemProperty)	
}
////////////////[1:46:00] How to use a function that creates an action on click in a page777777777777
const onEditClickHandler = () => {
	console.log(`ska uppdatera bilen ${vehicle.regNo}`)	//'' and ´´ is different or `` shift click 
};
	//and you place the other part on a html element
<span onClick={onEditClickHandler}>	//if you place {onEditClickHandler()} the bracket () means do it all the time.

////////////////////////////////////////////////////////////////
//Loading a list of vehicles through Get method [http {"list"}] [2:04:00]
const loadVehicle = async () => {
	const url = `${process.env.REACT_APP_BASEURL}/vehicles/list`; //we are using back ticks ``
	const response = await fetch(url);
	
	if(!response.ok){
		console.log('Hittade inga bilar, eller så gick något fel');
	}
	setVehicles(await response.json());
}
/////////////////// Sending vehicles to database///////////// [2:05:20]
const saveVehicle = async (vehicle) => {		//the above function didn't have anything inside the ()
	const url = `${process.env.REACT_APP_BASEURL}/vehicles`; //changing the link 
	const response = await fetch(url, {
		method: 'POST',
		headers: {
			'Content-Type':'application/json',
		},
		body: JSON.stringify(vehicle),
	});
	console.log(response);
	
	if(!response.status >= 200 && response.status <= 299){
	console.log('Bilen är sparad');
	console.log(await response.json());
	} else {
		console.log('Det gick fel någonstans');
		console.log(await response.json());
	}
};		//you do use semi colon here...





Därför är det också viktigt att ni är beredda att jobba med och hitta lösningar för bland annat följande områden:
Välja databaser och skapa en hållbar arkitektur
Sätta er in i och förbättra redan befintlig kod/lösningar
Screen scraping av webbsidor samt identifikation av data
Hämta data och bearbeta, samt lagra från olika API:er 
Deploya lösningarna på DigitalOcean.com  
Kunna växla fokus och jobba med olika uppdrag under LIAn (dock ej parallellt)
Kunna skapa lösningar både för front- och backend


YH mer -to help TH with 			60k students from yh 
									åtagandeslut för... skolorna
	
ärande & Lia/utblidare/konsulter
	












Reminders
----------------	
[ ] WHere the hell is this doc with the project info??

Making sense of Identity
-------------------------------
When you register, your sending in an email and pass.
	You save that with a new IdentityUser. 		///How do I connect that to Kunder? Kunder needs to have claims that sets them apart from eachother
	///Admin/student/Teacher. BUT How does it connect to the controller? Or 
How to connect controller to login info? With a function...?
	
	
	
	
	/*
		Focus your energy
		gaurd your time
		train your mind
		train your body
		think for yourself
		curate your friends
		curate your environment
		keep your promises
		stay cheerful and constructive
		updgrade the world	
	*/
